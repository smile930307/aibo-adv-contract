/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface EggNftInterface extends utils.Interface {
  functions: {
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getBaseURI()": FunctionFragment;
    "getEvilMintedCount()": FunctionFragment;
    "getGoodMintedCount()": FunctionFragment;
    "getMintType()": FunctionFragment;
    "getMintedCount()": FunctionFragment;
    "getNftMintPrice(uint256)": FunctionFragment;
    "getOgLimit()": FunctionFragment;
    "getOgMintedCountList()": FunctionFragment;
    "getOgPrice()": FunctionFragment;
    "getPlLimit()": FunctionFragment;
    "getPlMintedCountList()": FunctionFragment;
    "getPlPrice()": FunctionFragment;
    "getPrice()": FunctionFragment;
    "getUserWhiteListed()": FunctionFragment;
    "getWlLimit()": FunctionFragment;
    "getWlMintedCountList()": FunctionFragment;
    "getWlPrice()": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "mint(uint256,uint8)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "pause(bool)": FunctionFragment;
    "removeOgList(address[])": FunctionFragment;
    "removeWlList(address[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reveal()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "setGoldenList(address)": FunctionFragment;
    "setMintType(uint256)": FunctionFragment;
    "setNotRevealedURI(string)": FunctionFragment;
    "setOgLimit(uint256)": FunctionFragment;
    "setOgList(address[])": FunctionFragment;
    "setOgPrice(uint256)": FunctionFragment;
    "setPlLimit(uint256)": FunctionFragment;
    "setPlPrice(uint256)": FunctionFragment;
    "setTotalSupply(uint256)": FunctionFragment;
    "setWlLimit(uint256)": FunctionFragment;
    "setWlList(address[])": FunctionFragment;
    "setWlPrice(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawAll()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approve"
      | "balanceOf"
      | "getApproved"
      | "getBaseURI"
      | "getEvilMintedCount"
      | "getGoodMintedCount"
      | "getMintType"
      | "getMintedCount"
      | "getNftMintPrice"
      | "getOgLimit"
      | "getOgMintedCountList"
      | "getOgPrice"
      | "getPlLimit"
      | "getPlMintedCountList"
      | "getPlPrice"
      | "getPrice"
      | "getUserWhiteListed"
      | "getWlLimit"
      | "getWlMintedCountList"
      | "getWlPrice"
      | "isApprovedForAll"
      | "mint"
      | "name"
      | "owner"
      | "ownerOf"
      | "pause"
      | "removeOgList"
      | "removeWlList"
      | "renounceOwnership"
      | "reveal"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setBaseURI"
      | "setGoldenList"
      | "setMintType"
      | "setNotRevealedURI"
      | "setOgLimit"
      | "setOgList"
      | "setOgPrice"
      | "setPlLimit"
      | "setPlPrice"
      | "setTotalSupply"
      | "setWlLimit"
      | "setWlList"
      | "setWlPrice"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "totalSupply"
      | "transferFrom"
      | "transferOwnership"
      | "withdrawAll"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEvilMintedCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGoodMintedCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMintType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMintedCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNftMintPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOgLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOgMintedCountList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOgPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlMintedCountList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getUserWhiteListed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWlLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWlMintedCountList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWlPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "removeOgList",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWlList",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reveal", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setGoldenList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNotRevealedURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setOgLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setOgList", values: [string[]]): string;
  encodeFunctionData(
    functionFragment: "setOgPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWlLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setWlList", values: [string[]]): string;
  encodeFunctionData(
    functionFragment: "setWlPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEvilMintedCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGoodMintedCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintedCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNftMintPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOgLimit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOgMintedCountList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOgPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPlLimit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPlMintedCountList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPlPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserWhiteListed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWlLimit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getWlMintedCountList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWlPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeOgList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWlList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reveal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGoldenList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNotRevealedURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOgLimit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOgList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOgPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPlLimit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPlPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setWlLimit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setWlList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setWlPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "EggType(string,address)": EventFragment;
    "Fallback(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Received(address,uint256)": EventFragment;
    "SetBaseURI(string)": EventFragment;
    "SetGoldenList(address)": EventFragment;
    "SetOgLimit(address,uint256)": EventFragment;
    "SetOgList(address)": EventFragment;
    "SetOgPrice(address,uint256)": EventFragment;
    "SetPlLimit(address,uint256)": EventFragment;
    "SetPlList(address)": EventFragment;
    "SetPlPrice(address,uint256)": EventFragment;
    "SetTotalSupply(address,uint256)": EventFragment;
    "SetWlLimit(address,uint256)": EventFragment;
    "SetWlList(address)": EventFragment;
    "SetWlPrice(address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "WithdrawAll(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EggType"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Fallback"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Received"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBaseURI"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGoldenList"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetOgLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetOgList"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetOgPrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPlLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPlList"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPlPrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTotalSupply"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetWlLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetWlList"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetWlPrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawAll"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface EggTypeEventObject {
  _eggtype: string;
  addr: string;
}
export type EggTypeEvent = TypedEvent<[string, string], EggTypeEventObject>;

export type EggTypeEventFilter = TypedEventFilter<EggTypeEvent>;

export interface FallbackEventObject {
  arg0: string;
  arg1: BigNumber;
}
export type FallbackEvent = TypedEvent<
  [string, BigNumber],
  FallbackEventObject
>;

export type FallbackEventFilter = TypedEventFilter<FallbackEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ReceivedEventObject {
  arg0: string;
  arg1: BigNumber;
}
export type ReceivedEvent = TypedEvent<
  [string, BigNumber],
  ReceivedEventObject
>;

export type ReceivedEventFilter = TypedEventFilter<ReceivedEvent>;

export interface SetBaseURIEventObject {
  baseURI: string;
}
export type SetBaseURIEvent = TypedEvent<[string], SetBaseURIEventObject>;

export type SetBaseURIEventFilter = TypedEventFilter<SetBaseURIEvent>;

export interface SetGoldenListEventObject {
  _user: string;
}
export type SetGoldenListEvent = TypedEvent<[string], SetGoldenListEventObject>;

export type SetGoldenListEventFilter = TypedEventFilter<SetGoldenListEvent>;

export interface SetOgLimitEventObject {
  addr: string;
  _count: BigNumber;
}
export type SetOgLimitEvent = TypedEvent<
  [string, BigNumber],
  SetOgLimitEventObject
>;

export type SetOgLimitEventFilter = TypedEventFilter<SetOgLimitEvent>;

export interface SetOgListEventObject {
  _user: string;
}
export type SetOgListEvent = TypedEvent<[string], SetOgListEventObject>;

export type SetOgListEventFilter = TypedEventFilter<SetOgListEvent>;

export interface SetOgPriceEventObject {
  addr: string;
  _price: BigNumber;
}
export type SetOgPriceEvent = TypedEvent<
  [string, BigNumber],
  SetOgPriceEventObject
>;

export type SetOgPriceEventFilter = TypedEventFilter<SetOgPriceEvent>;

export interface SetPlLimitEventObject {
  addr: string;
  _count: BigNumber;
}
export type SetPlLimitEvent = TypedEvent<
  [string, BigNumber],
  SetPlLimitEventObject
>;

export type SetPlLimitEventFilter = TypedEventFilter<SetPlLimitEvent>;

export interface SetPlListEventObject {
  _user: string;
}
export type SetPlListEvent = TypedEvent<[string], SetPlListEventObject>;

export type SetPlListEventFilter = TypedEventFilter<SetPlListEvent>;

export interface SetPlPriceEventObject {
  addr: string;
  _price: BigNumber;
}
export type SetPlPriceEvent = TypedEvent<
  [string, BigNumber],
  SetPlPriceEventObject
>;

export type SetPlPriceEventFilter = TypedEventFilter<SetPlPriceEvent>;

export interface SetTotalSupplyEventObject {
  addr: string;
  _totalSupply: BigNumber;
}
export type SetTotalSupplyEvent = TypedEvent<
  [string, BigNumber],
  SetTotalSupplyEventObject
>;

export type SetTotalSupplyEventFilter = TypedEventFilter<SetTotalSupplyEvent>;

export interface SetWlLimitEventObject {
  addr: string;
  _count: BigNumber;
}
export type SetWlLimitEvent = TypedEvent<
  [string, BigNumber],
  SetWlLimitEventObject
>;

export type SetWlLimitEventFilter = TypedEventFilter<SetWlLimitEvent>;

export interface SetWlListEventObject {
  _user: string;
}
export type SetWlListEvent = TypedEvent<[string], SetWlListEventObject>;

export type SetWlListEventFilter = TypedEventFilter<SetWlListEvent>;

export interface SetWlPriceEventObject {
  addr: string;
  _price: BigNumber;
}
export type SetWlPriceEvent = TypedEvent<
  [string, BigNumber],
  SetWlPriceEventObject
>;

export type SetWlPriceEventFilter = TypedEventFilter<SetWlPriceEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface WithdrawAllEventObject {
  addr: string;
  cro: BigNumber;
}
export type WithdrawAllEvent = TypedEvent<
  [string, BigNumber],
  WithdrawAllEventObject
>;

export type WithdrawAllEventFilter = TypedEventFilter<WithdrawAllEvent>;

export interface EggNft extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EggNftInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getBaseURI(overrides?: CallOverrides): Promise<[string]>;

    getEvilMintedCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getGoodMintedCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMintType(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMintedCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNftMintPrice(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOgLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOgMintedCountList(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOgPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPlLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPlMintedCountList(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPlPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserWhiteListed(overrides?: CallOverrides): Promise<[BigNumber]>;

    getWlLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    getWlMintedCountList(overrides?: CallOverrides): Promise<[BigNumber]>;

    getWlPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mint(
      _mintAmount: BigNumberish,
      _nftType: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pause(
      _state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeOgList(
      _user: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeWlList(
      _user: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reveal(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseURI(
      baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGoldenList(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMintType(
      nftMintType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNotRevealedURI(
      _notRevealedURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOgLimit(
      _count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOgList(
      _user: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOgPrice(
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPlLimit(
      _count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPlPrice(
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTotalSupply(
      _totalSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWlLimit(
      _count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWlList(
      _user: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWlPrice(
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getBaseURI(overrides?: CallOverrides): Promise<string>;

  getEvilMintedCount(overrides?: CallOverrides): Promise<BigNumber>;

  getGoodMintedCount(overrides?: CallOverrides): Promise<BigNumber>;

  getMintType(overrides?: CallOverrides): Promise<BigNumber>;

  getMintedCount(overrides?: CallOverrides): Promise<BigNumber>;

  getNftMintPrice(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOgLimit(overrides?: CallOverrides): Promise<BigNumber>;

  getOgMintedCountList(overrides?: CallOverrides): Promise<BigNumber>;

  getOgPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getPlLimit(overrides?: CallOverrides): Promise<BigNumber>;

  getPlMintedCountList(overrides?: CallOverrides): Promise<BigNumber>;

  getPlPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getUserWhiteListed(overrides?: CallOverrides): Promise<BigNumber>;

  getWlLimit(overrides?: CallOverrides): Promise<BigNumber>;

  getWlMintedCountList(overrides?: CallOverrides): Promise<BigNumber>;

  getWlPrice(overrides?: CallOverrides): Promise<BigNumber>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mint(
    _mintAmount: BigNumberish,
    _nftType: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  pause(
    _state: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeOgList(
    _user: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeWlList(
    _user: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reveal(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseURI(
    baseURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGoldenList(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMintType(
    nftMintType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNotRevealedURI(
    _notRevealedURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOgLimit(
    _count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOgList(
    _user: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOgPrice(
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPlLimit(
    _count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPlPrice(
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTotalSupply(
    _totalSupply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWlLimit(
    _count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWlList(
    _user: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWlPrice(
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getBaseURI(overrides?: CallOverrides): Promise<string>;

    getEvilMintedCount(overrides?: CallOverrides): Promise<BigNumber>;

    getGoodMintedCount(overrides?: CallOverrides): Promise<BigNumber>;

    getMintType(overrides?: CallOverrides): Promise<BigNumber>;

    getMintedCount(overrides?: CallOverrides): Promise<BigNumber>;

    getNftMintPrice(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOgLimit(overrides?: CallOverrides): Promise<BigNumber>;

    getOgMintedCountList(overrides?: CallOverrides): Promise<BigNumber>;

    getOgPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getPlLimit(overrides?: CallOverrides): Promise<BigNumber>;

    getPlMintedCountList(overrides?: CallOverrides): Promise<BigNumber>;

    getPlPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getUserWhiteListed(overrides?: CallOverrides): Promise<BigNumber>;

    getWlLimit(overrides?: CallOverrides): Promise<BigNumber>;

    getWlMintedCountList(overrides?: CallOverrides): Promise<BigNumber>;

    getWlPrice(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mint(
      _mintAmount: BigNumberish,
      _nftType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    pause(_state: boolean, overrides?: CallOverrides): Promise<void>;

    removeOgList(_user: string[], overrides?: CallOverrides): Promise<void>;

    removeWlList(_user: string[], overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reveal(overrides?: CallOverrides): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseURI(baseURI: string, overrides?: CallOverrides): Promise<void>;

    setGoldenList(_user: string, overrides?: CallOverrides): Promise<void>;

    setMintType(
      nftMintType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setNotRevealedURI(
      _notRevealedURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOgLimit(_count: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setOgList(_user: string[], overrides?: CallOverrides): Promise<void>;

    setOgPrice(_price: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setPlLimit(_count: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setPlPrice(_price: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setTotalSupply(
      _totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWlLimit(_count: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setWlList(_user: string[], overrides?: CallOverrides): Promise<void>;

    setWlPrice(_price: BigNumberish, overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAll(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "EggType(string,address)"(_eggtype?: null, addr?: null): EggTypeEventFilter;
    EggType(_eggtype?: null, addr?: null): EggTypeEventFilter;

    "Fallback(address,uint256)"(arg0?: null, arg1?: null): FallbackEventFilter;
    Fallback(arg0?: null, arg1?: null): FallbackEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Received(address,uint256)"(arg0?: null, arg1?: null): ReceivedEventFilter;
    Received(arg0?: null, arg1?: null): ReceivedEventFilter;

    "SetBaseURI(string)"(baseURI?: null): SetBaseURIEventFilter;
    SetBaseURI(baseURI?: null): SetBaseURIEventFilter;

    "SetGoldenList(address)"(_user?: null): SetGoldenListEventFilter;
    SetGoldenList(_user?: null): SetGoldenListEventFilter;

    "SetOgLimit(address,uint256)"(
      addr?: null,
      _count?: null
    ): SetOgLimitEventFilter;
    SetOgLimit(addr?: null, _count?: null): SetOgLimitEventFilter;

    "SetOgList(address)"(_user?: null): SetOgListEventFilter;
    SetOgList(_user?: null): SetOgListEventFilter;

    "SetOgPrice(address,uint256)"(
      addr?: null,
      _price?: null
    ): SetOgPriceEventFilter;
    SetOgPrice(addr?: null, _price?: null): SetOgPriceEventFilter;

    "SetPlLimit(address,uint256)"(
      addr?: null,
      _count?: null
    ): SetPlLimitEventFilter;
    SetPlLimit(addr?: null, _count?: null): SetPlLimitEventFilter;

    "SetPlList(address)"(_user?: null): SetPlListEventFilter;
    SetPlList(_user?: null): SetPlListEventFilter;

    "SetPlPrice(address,uint256)"(
      addr?: null,
      _price?: null
    ): SetPlPriceEventFilter;
    SetPlPrice(addr?: null, _price?: null): SetPlPriceEventFilter;

    "SetTotalSupply(address,uint256)"(
      addr?: null,
      _totalSupply?: null
    ): SetTotalSupplyEventFilter;
    SetTotalSupply(addr?: null, _totalSupply?: null): SetTotalSupplyEventFilter;

    "SetWlLimit(address,uint256)"(
      addr?: null,
      _count?: null
    ): SetWlLimitEventFilter;
    SetWlLimit(addr?: null, _count?: null): SetWlLimitEventFilter;

    "SetWlList(address)"(_user?: null): SetWlListEventFilter;
    SetWlList(_user?: null): SetWlListEventFilter;

    "SetWlPrice(address,uint256)"(
      addr?: null,
      _price?: null
    ): SetWlPriceEventFilter;
    SetWlPrice(addr?: null, _price?: null): SetWlPriceEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;

    "WithdrawAll(address,uint256)"(
      addr?: null,
      cro?: null
    ): WithdrawAllEventFilter;
    WithdrawAll(addr?: null, cro?: null): WithdrawAllEventFilter;
  };

  estimateGas: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBaseURI(overrides?: CallOverrides): Promise<BigNumber>;

    getEvilMintedCount(overrides?: CallOverrides): Promise<BigNumber>;

    getGoodMintedCount(overrides?: CallOverrides): Promise<BigNumber>;

    getMintType(overrides?: CallOverrides): Promise<BigNumber>;

    getMintedCount(overrides?: CallOverrides): Promise<BigNumber>;

    getNftMintPrice(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOgLimit(overrides?: CallOverrides): Promise<BigNumber>;

    getOgMintedCountList(overrides?: CallOverrides): Promise<BigNumber>;

    getOgPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getPlLimit(overrides?: CallOverrides): Promise<BigNumber>;

    getPlMintedCountList(overrides?: CallOverrides): Promise<BigNumber>;

    getPlPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getUserWhiteListed(overrides?: CallOverrides): Promise<BigNumber>;

    getWlLimit(overrides?: CallOverrides): Promise<BigNumber>;

    getWlMintedCountList(overrides?: CallOverrides): Promise<BigNumber>;

    getWlPrice(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      _mintAmount: BigNumberish,
      _nftType: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(
      _state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeOgList(
      _user: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeWlList(
      _user: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reveal(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseURI(
      baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGoldenList(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMintType(
      nftMintType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNotRevealedURI(
      _notRevealedURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOgLimit(
      _count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOgList(
      _user: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOgPrice(
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPlLimit(
      _count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPlPrice(
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTotalSupply(
      _totalSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWlLimit(
      _count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWlList(
      _user: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWlPrice(
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBaseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEvilMintedCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGoodMintedCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMintType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMintedCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNftMintPrice(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOgLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOgMintedCountList(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOgPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPlLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPlMintedCountList(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserWhiteListed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWlLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWlMintedCountList(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWlPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      _mintAmount: BigNumberish,
      _nftType: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      _state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeOgList(
      _user: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeWlList(
      _user: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reveal(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGoldenList(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMintType(
      nftMintType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNotRevealedURI(
      _notRevealedURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOgLimit(
      _count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOgList(
      _user: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOgPrice(
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPlLimit(
      _count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPlPrice(
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTotalSupply(
      _totalSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWlLimit(
      _count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWlList(
      _user: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWlPrice(
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
